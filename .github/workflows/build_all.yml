name: Build ALL extensions

on:
  workflow_dispatch:
    inputs:
      git-repo:
        description: Git repo (Optional, defaults to <your name>/aniyomi-extensions
        default: ''
        required: false
      git-ref:
        description: Git Ref (Optional, defaults to master)
        default: 'master'
        required: false

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  CI_CHUNK_SIZE: 65
  REPO: ${{ github.event.inputs.git-repo }}

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      individualMatrix: ${{ steps.generate-matrices.outputs.individualMatrix }}
      multisrcMatrix: ${{ steps.generate-matrices.outputs.multisrcMatrix }}
    env:
      CI_MODULE_GEN: true
    steps:
      - name: Check inputs
        if: env.REPO == ''
        run: |
          set -e
          echo "REPO=${{ github.repository_owner }}/aniyomi-extensions" >> $GITHUB_ENV

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          fetch-depth: 0
          ref: ${{ github.event.inputs.git-ref }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu

      - name: Get number of modules
        run: |
          set -x
          projects=(src/*/*)

          echo "NUM_INDIVIDUAL_MODULES=${#projects[@]}" >> $GITHUB_ENV

      - id: generate-matrices
        name: Create output matrices
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const numIndividualModules = process.env.NUM_INDIVIDUAL_MODULES;
            const chunkSize = process.env.CI_CHUNK_SIZE;

            const numIndividualChunks = Math.ceil(numIndividualModules / chunkSize);

            console.log(`Individual modules: ${numIndividualModules} (${numIndividualChunks} chunks of ${chunkSize})`);

            core.setOutput('individualMatrix', JSON.stringify({ chunk: [...Array(numIndividualChunks).keys()] }));

  build_all:
    name: Build all sources
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: ${{ fromJSON(needs.prepare.outputs.individualMatrix).chunk }}
    steps:
      - name: Check inputs
        if: env.REPO == ''
        run: |
          set -e
          echo "REPO=${{ github.repository_owner }}/aniyomi-extensions" >> $GITHUB_ENV

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          fetch-depth: 0
          ref: ${{ github.event.inputs.git-ref }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu

      - name: Build extensions (chunk ${{ matrix.chunk }})
        env:
          CI_CHUNK_NUM: ${{ matrix.chunk }}
        run: ./gradlew -p src assembleDebug

      - name: Upload APKs (chunk ${{ matrix.chunk }})
        uses: actions/upload-artifact@v4
        with:
          name: "individual-apks-${{ matrix.chunk }}"
          path: "**/*.apk"
          retention-days: 1

      - name: Check out target branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: apk-branch
          fetch-depth: 0

      - name: Move APKs to target branch
        run: |
          mkdir -p apks/chunk-${{ matrix.chunk }}
          mv **/*.apk apks/chunk-${{ matrix.chunk }}

      - name: Commit and push APKs
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add apks/chunk-${{ matrix.chunk }}
          git commit -m "Add APKs for chunk ${{ matrix.chunk }}"
          git push origin apk-branch
